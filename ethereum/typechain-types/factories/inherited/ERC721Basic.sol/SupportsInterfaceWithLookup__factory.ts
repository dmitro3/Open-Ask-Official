/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SupportsInterfaceWithLookup,
  SupportsInterfaceWithLookupInterface,
} from "../../../inherited/ERC721Basic.sol/SupportsInterfaceWithLookup";

const _abi = [
  {
    inputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    constant: true,
    inputs: [],
    name: "InterfaceId_ERC165",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506100276301ffc9a760e01b61002c60201b60201c565b6100cb565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561005f57600080fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6101a3806100da6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b57806319fa8f50146100a0575b600080fd5b6100866004803603602081101561005157600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506100fc565b604051808215151515815260200191505060405180910390f35b6100a8610163565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b6301ffc9a760e01b8156fea265627a7a7231582088efee1cfb1f74a08e213fbfcd8d9a5e3100adda0a82a3043470f933cc1a7b2f64736f6c634300050c0032";

type SupportsInterfaceWithLookupConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SupportsInterfaceWithLookupConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SupportsInterfaceWithLookup__factory extends ContractFactory {
  constructor(...args: SupportsInterfaceWithLookupConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SupportsInterfaceWithLookup> {
    return super.deploy(
      overrides || {}
    ) as Promise<SupportsInterfaceWithLookup>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SupportsInterfaceWithLookup {
    return super.attach(address) as SupportsInterfaceWithLookup;
  }
  override connect(signer: Signer): SupportsInterfaceWithLookup__factory {
    return super.connect(signer) as SupportsInterfaceWithLookup__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SupportsInterfaceWithLookupInterface {
    return new utils.Interface(_abi) as SupportsInterfaceWithLookupInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SupportsInterfaceWithLookup {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SupportsInterfaceWithLookup;
  }
}
